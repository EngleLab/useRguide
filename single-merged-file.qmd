# Single Merged File {#sec-single-merged-file}

```{r}
#| results: "asis"
#| echo: false

source("_common.R")
```

**For this chapter you will need to**:

-   See @sec-working-with-data for working with data in R if you are completely new to R or the tidyverse

-   install the `purrr` package

```{r}
#| eval: false
install.packages("purrr")
```

-   install the `psyworkflow` package

```{r}
#| eval: false
# if you do not have devtools installed then do this first
install.packages("devtools")
# install workflow
devtools::install_github("dr-JT/psyworkflow")
```

-   Setup a project folder, see @sec-psyworkflow

-   download [this data file]() to **data/raw** in your project folder

-   get an R script template to merge multiple scored files

```{r}
#| eval: false
psyworkflow::get_template(merge_script = TRUE)
```

------------------------------------------------------------------------

## Overview

At this stage of data processing you have created multiple data files containing the task scores, reliabilities, and other variables for each task. The next step is to create a single merged data file containing the primary task scores for each task that you will be performing data analysis on. We can also create data files with the reliabilities, administration times, and a log of the data cleaning steps.

## Setup

```{r}
#| eval: false
# ---- Setup ----
# packages
library(here)
library(readr)
library(dplyr)
library(purrr)
library(tidyr)

# directories
import_dir <- "data/scored"
output_dir <- "data"

# file names
output_scores <- "TaskScores.csv"
output_reliabilities <- "Reliabilities.csv"
output_admintimes <- "AdminTimes.csv"
output_datacleaning <- "DataCleaning_log.csv"
# --------------
```

-   packages

    Any packages required for this script are loaded at the top. For this task we will need the `here`, `readr`, `dplyr`, `purrr`, and `tidyr` packages.

-   directories

    If you are using my default project organization, you do not need to change anything here.

-   file names

    Feel free to change these as you like. E.g., You may want to add the study name in front of these file names, "StudyName_TaskScores.csv".

## Import

For more details on importing a batch of files see @sec-multiple-files-join

```{r}
#| eval: false
# ---- Import Data ----
files <- list.files(here(import_dir), pattern = "Scores", full.names = TRUE)
data_import <- files %>%
  map(read_csv) %>%
  reduce(full_join, by = "Subject")
# ---------------------
```

## Task Scores

```{r}
#| eval: false
# ---- Select Task Scores ----
data_scores <- data_import %>%
  select() %>%
  filter()

# list of final subjects
subjlist <- select(data_scores, Subject)
# ----------------------------
```

At this step, you may also want to filter out subjects that have missing data on specific tasks, or too much missing data across all the tasks.

I advise creating a final subject list of all subjects that made it to this state of data processing.

## Reliabilities

```{r}
#| eval: false
# ---- Reliabilities ----
data_reliabilities <- data_import %>%
  select(contains("splithalf"), contains("cronbachalpha")) %>%
  drop_na() %>%
  distinct() %>%
  pivot_longer(everything(),
               names_to = c("Task", "metric"),
               names_pattern = "(\\w+.\\w+).(\\w+)",
               values_to = "value") %>%
  pivot_wider(id_col = Task,
              names_from = metric,
              values_from = value)
# -----------------------
```

The code in `pivot_longer(names_pattern = "(\\w+.\\w+).(\\w+)")` follows a specific naming scheme used for column names. Underscores (optional) can be used for task names and column descriptions, but a period (required) is ONLY used to seperate the task name / description from the description of the task score type / what the value represents (e.g., RT = reaction time, splithalf = split-half reliability)

**Task_Name_MoreStuff.ScoreType**

e.g., **StroopDL_Last4Rev.ResponseDeadline**, **VAorient_S.k**, **Antisaccade.ACC**

This should also be used for reliabilities and admin times:

e.g., **StroopDL_Last4Rev.splithalf**, **StroopDL.AdminTime**

## Admin Times

```{r}
#| eval: false
# ---- Admin Times ----
data_merge <- data_import %>%
  select(contains("AdminTime")) %>%
  summarise_all(list(mean = mean, sd = sd), na.rm = TRUE) %>%
  pivot_longer(everything(),
               names_to = c("Task", "metric"),
               names_pattern = "(\\w+.\\w+).(\\w+)",
               values_to = "value") %>%
  mutate(value = round(value, 3)) %>%
  pivot_wider(id_col = Task,
              names_from = metric,
              names_prefix = "AdminTime.",
              values_from = "value")
# ---------------------
```
