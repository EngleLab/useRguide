# This is the Way {#sec-this-is-the-way}

```{r}
#| results: "asis"
#| echo: false

source("_common.R")
```

The [tidyverse](https://www.tidyverse.org){target="_blank"} is a set of packages that share an underlying design philosophy, grammar, and data structures. The most common packages in the tidyverse are; `readr` for importing and writing data files, `dplyr` and `tidyr` for manipulating and reformatting data, and `ggplot2` for data visualization.

```{r}
#| label: fig-tidyverse-graphic
#| echo: false
#| out-width: 50%
#| fig-cap: graphic of some tidyverse packages

knitr::include_graphics(rep("images/tidyverse.png"))
```

Although you will be learning R in this tutorial, it might be more appropriate to say that you are learning the tidyverse.

The tidyverse consists of packages that are simple and intuitive to use and will take you from importing data (with **readr**), to transforming and manipulating data structures (with **dplyr** and **tidyr**), and to data visualization (with **ggplot2**).

There is also a [tidyverse style guide](https://style.tidyverse.org){target="_blank"} for writing R code.

------------------------------------------------------------------------

There is some controversy in the R community about the use of the **tidyverse** way over the standard **base R** way of doing things. However, the tidyverse offers a [more intuitive and common language way of working with data in R](https://rfortherestofus.com/2019/06/what-is-a-tidyverse-centric-approach/){target="_blank"}; whereas, using base R feels more like programming and is harder to read, like a language you are not fully fluent in.

David provides a simple example of this (and there are a lot of other examples out there) on his [blog post](https://rfortherestofus.com/2019/06/what-is-a-tidyverse-centric-approach/){target="_blank"}:

The pipe operator allows you to chain together a series of functions to conduct a series of manipulations on it. Conceptually, here's what code written using the tidyverse looks like

```{r}
#| eval: false

data |>
  step1 |>
  step2 |>
  step3
```

We start with our data. Then we do step1. Then we do step2. Then we do step3. The pipe ties it all together, enabling us to do multiple things to our data, all in one execution of code.

Actual tidyverse code might look something like this:

```{r}
#| eval: false

data |>
  filter(year == 2019) |>
  summarise(mean_satisfaction_score = 
              mean(satisfaction_rating)) |>
  arrange(mean_satisfaction_score)
```

You can almost read this code in English.

1.  Start with your data.
2.  Filter to only include observations from 2019.
3.  Calculate a mean satisfaction score from satisfaction ratings
4.  Arrange our results by the mean satisfaction score.

Being able to read the code is one of the unique features of the Tidyverse. The Tidyverse manifesto prioritizes software that is designed "...primarily so that it is easy to use by humans. Computer efficiency is a secondary concern because the bottleneck in most data analysis is thinking time, not computing time."

The emphasis on human-readable function names (filter, group_by, summarize, arrange, etc.) is one part of this. The use of the pipe is another. Think of breaking code into multiple lines using the pipe as the equivalent of using spaces to make words easier to use. Youcanwriteasentencewithoutspacesbetweenwordsbutitsureisn'teasytoreadamirite?

Did you enjoy that? Then you'll especially enjoy reading base R code, which often looks like this:

```{r}
#| eval: false

mean(data$satisfaction_rating[data[year == 2019]])
```

And note, this does the same thing as the piped version above, minus the arrange step. Even with one fewer step, it's already much less readable.

------------------------------------------------------------------------

## The pipe operator {#sec-the-pipe-operator}

There are now two pipe operators. The original `dplyr` pipe operator is `%>%` and the newer base R pipe operator is `|>` . You can use either one but as a lab we will try to switch over to using the base R pipe.

The pipe operator is extremely useful and we use it extensively but needs some explanation.

There are different methods for writing code that performs multiple functions on the same object. For instance, all these examples use the tidyverse but only one of them (the last one) uses the pipe operator.

```{r}
#| eval: false

library(dplyr)
# create a sample dataframe
data <- data.frame(x = c(1, 2, 3), y = c("a", "b", "c"))

# three functions, filter, calculate a mean, 
# then select only some columns to keep
data <- filter(data, y != "c")
data <- mutate(data, x_mean = mean(x))
data <- select(data, y, x_mean)
```

Another way of writing this code:

```{r}
#| eval: false

library(dplyr)
# create a sample dataframe
data <- data.frame(x = c(1, 2, 3), y = c("a", "b", "c"))

# three functions, filter, calculate a mean, 
# then select only some columns to keep
data <- select(mutate(filter(data, y != "c"), 
                      x_mean = mean(x)), y, x_mean)
```

Of these two methods, the first is preferable as it is easier to read. Another alternative is to use the pipe operator `|>`.

```{r}
#| eval: false

library(dplyr)
# create a sample dataframe
data <- data.frame(x = c(1, 2, 3), y = c("a", "b", "c"))

# three functions, filter, calculate a mean, 
# then select only some columns to keep
data <- data |>
  filter(y != "c") |>
  mutate(x_mean = mean(x)) |>
  select(y, x_mean)
```

With the pipe operator, the result of the previous line gets passed (or piped) onto the next function. The first line in this example is simply specifying the data frame that is being passed from one line to the next. Notice how I did not have to specify `data` inside the `filter()`, `mutate()`, and `select()` functions. This makes the code more concise and easier to read. The end result of the last function, then gets assigned to the `data <-`.

If an error occurs somewhere in the pipe, an easy way to troubleshoot it is to remove the pipe operator at one of the lines one at a time to figure out where the error is located.
